{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","ReactDOM","render","status","useState","Array","fill","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","current","winner","moves","map","step","move","desc","key","jumpTo","newHistory","slice","handleClick","document","getElementById"],"mappings":"gOAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,OAKnB,SAASC,EAAMJ,GACX,SAASK,EAAaC,GAClB,OAAO,kBAACP,EAAD,CAAQI,MAAOH,EAAMO,QAAQD,GAAIJ,QAAS,kBAAMF,EAAME,QAAQI,MAGzE,OACI,6BACI,yBAAKL,UAAU,aACVI,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKJ,UAAU,aACVI,EAAa,GACbA,EAAa,GACbA,EAAa,IAElB,yBAAKJ,UAAU,aACVI,EAAa,GACbA,EAAa,GACbA,EAAa,KAwE9B,SAASG,EAAgBD,GAWrB,IAVA,IAAME,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFH,EAAI,EAAGA,EAAIG,EAAMC,OAAQJ,IAAK,CAAC,IAAD,cACjBG,EAAMH,GADW,GAC5BK,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GAClE,OAAON,EAAQI,GAGvB,OAAO,KAtBXG,IAASC,OACL,mBA9DJ,WAAiB,IA4BTC,EA5BQ,EACkBC,mBAAS,CAAC,CACpCV,QAASW,MAAM,GAAGC,KAAK,SAFf,mBACLC,EADK,KACIC,EADJ,OAIkBJ,oBAAS,GAJ3B,mBAILK,EAJK,KAIIC,EAJJ,OAKwBN,mBAAS,GALjC,mBAKLO,EALK,KAKOC,EALP,KAONC,EAAUN,EAAQI,GAClBG,EAASnB,EAAgBkB,EAAQnB,SAsBnCS,EADAW,EACS,WAAaA,EAEb,iBAAmBL,EAAU,IAAM,KAGhD,IAAMM,EAAQR,EAAQS,KAAI,SAACC,EAAMC,GAC7B,IAAMC,EAAOD,EAAI,sBACEA,GADF,mBAGjB,OACI,wBAAIE,IAAKF,GACL,4BAAQ7B,QAAS,kBAlB7B,SAAgB4B,GACZL,EAAcK,GACdP,EAAYO,EAAO,IAAO,GAgBKI,CAAOH,KAAQC,OAKlD,OACI,yBAAK/B,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CAAOG,QAASmB,EAAQnB,QAASL,QAAS,SAACI,GAAD,OAvCtD,SAAqBA,GACjB,IAAM6B,EAAaf,EAAQgB,MAAM,EAAGZ,EAAa,GAE3CjB,EADU4B,EAAWA,EAAWzB,OAAS,GACvBH,QAAQ6B,QAC5B5B,EAAgBD,IAAYA,EAAQD,KAGxCC,EAAQD,GAAKgB,EAAU,IAAM,IAC7BD,EAAW,GAAD,mBAAKc,GAAL,CAAiB,CAAC5B,cAC5BgB,GAAYD,GACZG,EAAcU,EAAWzB,SA6BgC2B,CAAY/B,OAEjE,yBAAKL,UAAU,aACX,6BAAMe,GACN,4BAAKY,OASjB,MACAU,SAASC,eAAe,W","file":"static/js/main.cc242ae3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction Board(props) {\r\n    function renderSquare(i) {\r\n        return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(0)}\r\n                {renderSquare(1)}\r\n                {renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(3)}\r\n                {renderSquare(4)}\r\n                {renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {renderSquare(6)}\r\n                {renderSquare(7)}\r\n                {renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Game() {\r\n    const [history, setHistory] = useState([{\r\n        squares: Array(9).fill(null)\r\n    }]);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    function handleClick(i) {\r\n        const newHistory = history.slice(0, stepNumber + 1);\r\n        const current = newHistory[newHistory.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n        setHistory([...newHistory, {squares}]);\r\n        setXIsNext(!xIsNext);\r\n        setStepNumber(newHistory.length);\r\n    }\r\n\r\n    function jumpTo(step){\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0);\r\n    }\r\n\r\n    let status;\r\n    if (winner) {\r\n        status = \"Winner: \" + winner;\r\n    } else {\r\n        status = 'Next player: ' + (xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    const moves = history.map((step, move) => {\r\n        const desc = move ? \r\n            `Go to move #${move}` :\r\n            `Go to game start`;\r\n        return (\r\n            <li key={move}>\r\n                <button onClick={() => jumpTo(move)}>{desc}</button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board squares={current.squares} onClick={(i) => handleClick(i)} />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}"],"sourceRoot":""}